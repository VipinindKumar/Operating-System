// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	
	static Array ram, heap;
	static int freeList, lastSeg;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		
		let heap = 2048;
		let freeList = 2048;
		let lastSeg = 2048;
		
		let heap[0] = 0;      // next
		let heap[1] = 14335;  // length
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int counter, bestFit, bestFitsize;
		
		let counter = freeList;
		let bestFitsize = 0;
		
		// stop at null
		while ~(current = 0) {
			// if a segment is possible
			if (~(current[1] < (size + 2))) {
				// if firstfit segment is encountered, then set the bestFit to it
				if (bestFitsize = 0) {
					let bestFit = current;
					let bestFitsize = current[1];
				}
				
				// if a segment is found of the exact size+2, then break the loop, after setting bestFit
				if (current[1] = size + 2) {
					let bestFit = current;
					let bestFitsize = current[1];
					
					let break = true;
				}
				
				// if the current segment is better fit then, set bestFit to it
				if (current[1] < bestFitsize) {
					let bestFit = current;
					let bestFitsize = current[1];
				}
			}
				
			// update the current value
			let current = current[0];
			if (break) {
				// set current to 0(null), to break the loop
				let current = 0;
			}
		}
		
		// set block to needed part of the bestFit segment
		
		
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		// put the Array at the end of the freeList
		let lastSeg[0] = o;
		let lastSeg = o;
		
		let o[0] = 0;
    }    
}
