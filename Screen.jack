// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int twoToThe;
	static boolean color;
	static Array screen;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
        let twoToThe = Array.new(16);
        
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~(32767);
		
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
		
		// loop through every 16-bit register in screen and set it to 0
		while (i < 8192) {
			let screen[i] = 0;
			let i = i + 1;
		}
		
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr, mask;
		
		let addr = (32 * y) + (x / 16) + 16384;
		
		let value = Memory.peek(addr);
		
		// set the (x%16)th bit of value to the current color
		if (color) {
			let value = value | twoToThe[x & 15];
		}
		else {
			let value = value & (~twoToThe[x & 15]);
		}
		
		do Memory.poke(addr, value);
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy, temp;
        
        // Make sure x1 <= x2
        if( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if(dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        else { 
            if(dy = 0) {
                do Screen.drawHorizontalLine(x1, x2, y1);
            }
            else {
                do Screen.drawDiagonalLine( x1, y1, x2, y2, dx, dy );
            }
        }
		
		return;
    }
    
    /** Draws a diagonal line from pixel(x1, y1) to pixel(x2, y2), using the current color */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
		var int a, b, diff, ydir;
        
        if( dy < 0 ) {
            let ydir = -1;
        }
        else {
            let ydir = 1;
        }
		
		while (~(a > dx) & (((ydir = 1) & ~(b > dy)) | ((ydir = -1) & ~(b < dy)))) {
			do drawPixel((x1 + a), (y1 + b));
			
			// decide if need to go right or up
			if (diff < 0) {
				let a = a + 1;
				let diff = diff + (dy * ydir);
			}
			else {
				let b = b + ydir;
				let diff = diff - dx;
			}
		}
		
		return;
    }
    
    /** Draws a vertical line from pixel(x, y1) to pixel(x, y2), using the current color */
    function void drawVerticalLine( int x, int y1, int y2 ) {
        var int temp;
        
        // Make sure y1 <= y2
        if( y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while(~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        
        return;
    }
    
    /** Draws a horizontal line from pixel(x1, y) to pixel(x2, y), using the current color */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int start_addr, end_addr, x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = (y * 32) + (x1 / 16);
        let end_addr = (y * 32) + (x2 / 16) + (x2mod16 = 0); // need to get to previous bit if x2mod16 is zero

        if(start_addr = end_addr) {   
            // line starts and ends within the same screen address
            do Screen.draw_short_horizontal_line(x1, x2, y);
        }
        else { 
            if(~(x1mod16 = 0)) {      
                // Draw the short start of the line
                let start_addr = start_addr + 1;
                do Screen.draw_short_horizontal_line(x1, x1 + 16 - x1mod16, y);
            }
            if(~(x2mod16 = 0) ) {     
                // Draw the short end of the line
                let end_addr = end_addr - 1;
                do Screen.draw_short_horizontal_line(x2 - x2mod16, x2, y);
            }
            while(~(start_addr > end_addr)) {     
                // Draw the middle of the line
                let screen[start_addr] = color;
                let start_addr = start_addr + 1;
            }
        }
        
        return;
    }
    
    /** Draws a horizontal line from pixel(x1, y) to pixel(x2, y), using the current color.
        Used as a helper function for drawHorizontalLine(), to draw short horizontal lines 
        mostly spanning inside a single bit */
    function void draw_short_horizontal_line(int x1, int x2, int y) {
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
    
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
