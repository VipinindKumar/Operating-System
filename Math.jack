// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array twoToThe;
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        
        twoToThe[0] = 1;
        twoToThe[1] = 2 * twoToThe[0];
        twoToThe[2] = 2 * twoToThe[1];
        twoToThe[3] = 2 * twoToThe[2];
        twoToThe[4] = 2 * twoToThe[3];
        twoToThe[5] = 2 * twoToThe[4];
        twoToThe[6] = 2 * twoToThe[5];
        twoToThe[7] = 2 * twoToThe[6];
        twoToThe[8] = 2 * twoToThe[7];
        twoToThe[9] = 2 * twoToThe[8];
        twoToThe[10] = 2 * twoToThe[9];
        twoToThe[11] = 2 * twoToThe[10];
        twoToThe[12] = 2 * twoToThe[11];
        twoToThe[13] = 2 * twoToThe[12];
        twoToThe[14] = 2 * twoToThe[13];
        twoToThe[15] = 2 * twoToThe[14];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }
    
    /** Returns true if the j-th bit of the integer x is 1, false otherwise */
    function boolean bit(int x, int j) {
        return ~(x & twoToThe[j])
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        
        while (i < 16) {
            // Add the shifted value of x to sum, when corresponding y bit is 1
            if (bit(y, i)) {
                sum = sum + shiftedX;
            }
            // Shift x by single bit
            shiftedX = shiftedX + shiftedX;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
