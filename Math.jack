// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array twoToThe;
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~(32767);
		
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }
    
    /** Returns true if the j-th bit of the integer x is 1, false otherwise */
    function boolean bit(int x, int j) {
        return twoToThe[j] = (x & twoToThe[j]);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        
        while (i < 16) {
            // Add the shifted value of x to sum, when corresponding y bit is 1
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            // Shift x by single bit
            let shiftedX = shiftedX + shiftedX;
			
			let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
		var boolean changeSign;
		
		// figure out the sign of the result
		if (((x < 0) & ~(y < 0)) | (~(x < 0) & (y < 0))) {
			let changeSign = true;
		}
		else {
			let changeSign = false;
		}
		
		// Operate on the absolute value of the integers
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		let result = Math.udiv(x, y);
		
		// Flip the sign of the result if necessary
		if (changeSign) {
			return -result;
		}
		else {
			return result;
		}
    }
	
	/** Helper function for divide(), to perform the division */
	function int udiv(int x, int y) {
		var int q;
		
		// if the denominator is bigger, the result of the integer division is 0
		if ((y > x)) {
			return 0;
		}
		
		// if the y value is susceptible to becoming negative(32768 and above)
		// then set q to 0 else evaluate divide(x, 2*y)
		if (y < 16384) {
			let q = Math.udiv(x, y+y);
		}
		else {
			let q = 0;
		}
		
		if ((x - (q*(y+y))) < y) {
			return q + q;
		}
		else {
			return q + q + 1;
		}
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, yplus2;
		
		let y = 0;
		let j = 7;  // (n/2 - 1)
		
		while (~(j < 0)) {
			let yplus2 = (y + twoToThe[j])*(y + twoToThe[j]);
			
			if ((~(yplus2 > x)) & (~(yplus2 < 0))) {
				let y = y + twoToThe[j];
			}
			
			let j = j - 1;
		}
		
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
